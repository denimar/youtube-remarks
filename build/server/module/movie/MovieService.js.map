{"version":3,"sources":["../../../../server/module/movie/MovieService.js"],"names":["MovieService","clientDb","req","res","_fetchMovies","movies","status","send","movieId","params","id","search","index","type","body","query","match","then","response","hits","catch","err","created","get","_id","addResponse","update","doc","result","delete","deleteResp","code","message","folderId","records","newRecords","map","record","newRecord","isFolder","_type","_source","title","snippet","Promise","all","recordsToReturn","sort","item1","item2","text","toUpperCase","statusCode","_self","_getYoutubeVideoDefaultCaption","defaultCaption","_getYoutubeVideoInfo","videoInfo","_downloadCaption","downloadedCaption","videoToAdd","Object","assign","transcript","addedRecord","error","parentFolderId","folderName","insertedRecord","videoId","url","axios","data","pageInfo","totalResults","items","resolve","reject","xmlResponseData","transcript_list","track","forEach","subTitle","item","lang_default","captionObj","lang_code","name","resp"],"mappings":"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","file":"MovieService.js","sourcesContent":["import axios from 'axios'\nimport { parseString } from 'xml2js'\n\nclass MovieService {\n\n  constructor(clientDb) {\n    this.clientDb = clientDb\n  }\n\n  async fetchAll(req, res) {\n    const movies = await this._fetchMovies('-1', res)\n    res.status(200).send(movies)\n  }\n\n  async fetchMovieRemarks(req, res) {  \n    const movieId = req.params.id\n    this.clientDb.search({\n      index: 'movie',\n      type: 'remark',  \n      body: {\n        //sort: ['start'],\n        query: {\n          match: { movieId: movieId }\n        }\n      }\n    })\n    .then(response => res.status(200).send(response.hits.hits))\n    .catch(err => res.status(500).send(err))\n  }  \n\n  async addMovieRemark(req, res) {  \n    const response = await this.clientDb.index({\n      index: 'movie',\n      type: 'remark',\n      body: req.body\n    })\n    if (response.created) {\n      const addResponse = await this.clientDb.get({\n        index: 'movie',\n        type: 'remark',        \n        id: response._id\n      })\n      res.status(200).send(addResponse)\n    } else {\n      //\n    } \n  }  \n\n  async updateMovieRemark(req, res) {  \n    const response = await this.clientDb.update({\n      index: 'movie',\n      type: 'remark',\n      id: req.body.id,\n      body: {doc: req.body}\n    })\n    if (response.result === 'updated') {\n      res.status(200).send(req.body)\n    } else {\n      //\n    }\n  }    \n\n  async deleteMovieRemark(req, res) {\n    try {\n      const id = req.params.id\n      const deleteResp = await this.clientDb.delete({\n        index: 'movie',\n        type: 'remark',\n        id\n      });\n      res.status(200).send(deleteResp)\n    } catch(error) {\n      res.status(error.code).send(error.message)\n    }\n  }  \n\n  async _fetchMovies(folderId = '-1', res) {\n    try {\n      const response = await this.clientDb.search({\n        index: 'movie',\n        //_source : ['folderId', 'snippet.title', 'title'],\n        body: {\n          //sort: ['title'],\n          query: {\n            match: { folderId }\n          }\n        },\n      })\n      const records = response.hits.hits\n      const newRecords = records.map(async record => {\n        const newRecord = {}\n        const isFolder = record._type === 'folder'\n        newRecord['id'] = record._id\n        newRecord['text'] = record._source.title || record._source.snippet.title\n        newRecord['isLeaf'] = !isFolder\n        if (isFolder) {\n          newRecord['children'] = await this._fetchMovies(record._id, res)\n        }  \n        return newRecord\n      })\n\n      const recordsToReturn = await Promise.all(newRecords)\n      return recordsToReturn.sort((item1, item2) => {\n        if (item1.text.toUpperCase() > item2.text.toUpperCase()) return 1\n        if (item1.text < item2.text) return -1\n        return 0\n      })\n    } catch (error) {\n      res.status(error.statusCode).send('Error fetching movies: ' + error)\n    }\n  }\n\n  async getMovie(req, res) {  \n    try {\n      const response = await this.clientDb.get({\n        index: 'movie',\n        type: 'movie',        \n        id: req.params.movieId\n      })\n      res.status(200).send(response._source)\n    } catch (error) {\n      res.status(error.statusCode).send('Error getting movie: ' + error)\n    }\n  }\n\n  async add(req, res) {\n    try {\n      const folderId = req.body.folderId || '-1'\n      const movieId = req.body.movieId\n      const _self = this\n      _self._getYoutubeVideoDefaultCaption(movieId)\n        .then(async defaultCaption => {\n          const videoInfo = await _self._getYoutubeVideoInfo(movieId)\n          _self._downloadCaption(movieId, defaultCaption)\n            .then(async downloadedCaption => {\n              delete videoInfo['id']\n              const videoToAdd = Object.assign(videoInfo, {folderId, movieId, transcript: downloadedCaption.transcript.text})\n              const addedRecord = await this.clientDb.index({\n                index: 'movie',\n                type: 'movie',\n                body: videoToAdd\n              })\n              res.status(200).send(Object.assign(videoToAdd, {id: addedRecord._id}))\n            })            \n        })\n        .catch(error => {\n          res.status(error.code).send(error.message)\n        })\n    } catch(error) {\n      res.status(500).send('Error adding new item : ' + error)\n    }\n  }\n\n  async addFolder(req, res) {\n    try {\n      const parentFolderId = req.body.folderId || '-1'\n      const folderName = req.body.folderName\n      const insertedRecord = await this.clientDb.index({\n        index: 'movie',\n        type: 'folder',\n        body: {\n          folderId: parentFolderId,\n          title: folderName\n        }\n      })\n      res.status(200).send(Object.assign(insertedRecord, {id: insertedRecord._id, title: folderName}))\n    } catch(error) {\n      res.status(500).send('Error adding new folder : ' + error)\n    }\n  }  \n\n  async delete(req, res) {\n    try {\n      const id = req.params.id\n      const deleteResp = await this.clientDb.delete({\n        index: 'movie',\n        type: 'movie',\n        id\n      });\n      res.status(200).send(deleteResp)\n    } catch(error) {\n      res.status(error.code).send(error.message)\n    }\n  }\n\n  async deleteFolder(req, res) {\n    try {\n      const id = req.params.id\n      const deleteResp = await this.clientDb.delete({\n        index: 'movie',\n        type: 'folder',\n        id\n      });\n      res.status(200).send(deleteResp)\n    } catch(error) {\n      res.status(error.code).send(error.message)\n    }\n  }\n\n  async _getYoutubeVideoInfo(videoId) {\n    const url = `https://www.googleapis.com/youtube/v3/videos?id=${videoId}&key=AIzaSyCYLOZ87VDexemMk77oplhrtb7Mvyo10XU&part=snippet`\n    const response = await axios.get(url)\n    if (response.data.pageInfo.totalResults === 0) {\n      return {}\n    } else {\n      return response.data.items[0]\n    }\n  }\n\n  async _getYoutubeVideoDefaultCaption(videoId) {\n    return new Promise(async (resolve, reject) => {\n      const url = `http://video.google.com/timedtext?type=list&v=${videoId}`\n      const response = await axios.get(url)\n      const xmlResponseData = response.data\n      parseString(xmlResponseData, function (err, result) {\n        result.transcript_list.track.forEach(item => {\n          const subTitle = item['$']\n          if (subTitle.lang_default) {\n            resolve(subTitle)\n            return\n          }\n        })\n      })\n    })\n  }\n\n  _downloadCaption(movieId, captionObj) {\n    return new Promise((resolve, reject) => {\n      let url = `http://video.google.com/timedtext?type=track&v=${movieId}&lang=${captionObj.lang_code}`\n      if (captionObj.name) {\n        url += '&name=' + captionObj.name\n      }\n      axios.get(url)\n        .then(resp => {\n          parseString(resp.data, function (err, result) {\n            resolve(result)\n          })\n        })  \n        .catch(error => {\n          reject(error)\n        })        \n      })\n  }  \n\n}\n\nexport default MovieService"]}
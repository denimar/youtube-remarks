{"version":3,"sources":["../../server/index.js"],"names":["app","port","process","env","PORT","use","bodyParser","json","urlencoded","extended","NODE_ENV","express","static","path","join","__dirname","server","listen","console","log","clientDb","elasticsearch","Client","host","ping","requestTimeout","error","trace","ModuleRoutes","setTimeout"],"mappings":";;AAAA;;AACA;;;;AACA;;;;AACA;;;;AACA;;;;AACA;;;;AACA;;;;;;;;AAEA,IAAMA,MAAM,wBAAZ;AACA,IAAMC,OAAOC,QAAQC,GAAR,CAAYC,IAAZ,IAAoB,IAAjC;;AAEAJ,IAAIK,GAAJ,CAAQ,oBAAK,GAAL,CAAR;AACAL,IAAIK,GAAJ,CAAQC,qBAAWC,IAAX,EAAR;AACAP,IAAIK,GAAJ,CAAQC,qBAAWE,UAAX,CAAsB,EAAEC,UAAU,IAAZ,EAAtB,CAAR;;AAEA,IAAIP,QAAQC,GAAR,CAAYO,QAAZ,KAAyB,YAA7B,EAA2C;AACzC;AACAV,MAAIK,GAAJ,CAAQM,kBAAQC,MAAR,CAAeC,eAAKC,IAAL,CAAUC,SAAV,EAAqB,WAArB,CAAf,CAAR;;AAEA;AACA;AACA;AACA;AACD;;AAED,IAAMC,SAAShB,IAAIiB,MAAJ,CAAWhB,IAAX,EAAiB,YAAM;AACpCiB,UAAQC,GAAR,wBAAiClB,IAAjC;;AAEA,MAAMmB,WAAW,IAAIC,wBAAcC,MAAlB,CAAyB;AACxCC,UAAM,2BADkC,CACL;AACnC;AAFwC,GAAzB,CAAjB;AAIAH,WAASI,IAAT,CAAc;AACZ;AACAC,oBAAgB;AAFJ,GAAd;AAAA,uEAGG,iBAAMC,KAAN;AAAA;AAAA;AAAA;AAAA;AACD,kBAAIA,KAAJ,EAAW;AACTR,wBAAQS,KAAR,CAAc,gCAAd;AACD,eAFD,MAEO;AACLT,wBAAQC,GAAR,CAAY,6BAAZ;AACD;;AALA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAHH;;AAAA;AAAA;AAAA;AAAA;;AAYA,MAAIS,sBAAJ,CAAiB5B,GAAjB,EAAsBoB,QAAtB;AACD,CApBc,CAAf;AAqBAJ,OAAOa,UAAP,CAAkB,QAAlB","file":"index.js","sourcesContent":["import 'babel-polyfill'\nimport express from 'express'\nimport path from 'path'\nimport bodyParser from 'body-parser'\nimport cors from 'cors'\nimport ModuleRoutes from './module/ModuleRoutes'\nimport elasticsearch from 'elasticsearch'\n\nconst app = express()\nconst port = process.env.PORT || 5000\n\napp.use(cors('*'))\napp.use(bodyParser.json())\napp.use(bodyParser.urlencoded({ extended: true }))\n\nif (process.env.NODE_ENV === 'production') {\n  // Serve any static files\n  app.use(express.static(path.join(__dirname, '../client')));\n\n  // Handle React routing, return all requests to React app\n  // app.get('*', function(req, res) {\n  //   res.sendFile(path.join(__dirname, '../client', 'index.html'));\n  // });\n}\n\nconst server = app.listen(port, () => {\n  console.log(`Listening on port ${port}`)\n  \n  const clientDb = new elasticsearch.Client({\n    host: 'http://35.211.226.16:9200', //Kibana at: http://35.211.226.16:5601 //reference: https://www.elastic.co/assets/blt395810ab50bd150b/6.3_es_commands.txt\n    //log: 'trace'\n  })\n  clientDb.ping({\n    // ping usually has a 3000ms timeout\n    requestTimeout: 10000\n  }, async error => {\n    if (error) {\n      console.trace('elasticsearch cluster is down!');\n    } else {\n      console.log('Elasticsearch is running...');\n    }\n  })\n  \n\n  new ModuleRoutes(app, clientDb)\n})\nserver.setTimeout(50000000);\n"]}